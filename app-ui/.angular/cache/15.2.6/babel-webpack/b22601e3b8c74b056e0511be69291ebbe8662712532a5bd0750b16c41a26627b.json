{"ast":null,"code":"import { catchError, shareReplay, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(email, password) {\n    return this.http.post(this.SERVER_URL + 'auth/login', {\n      email: email,\n      password: password\n    }).pipe(tap(res => this.setSession(res.access_token)), shareReplay(), catchError(err => {\n      return throwError(() => err);\n    }));\n  }\n  register(email, passsword) {\n    return this.http.post(this.SERVER_URL + 'auth/register', {\n      email: email,\n      password: passsword\n    });\n  }\n  setSession(token) {\n    const expiresAt = moment().add(360000, 'second');\n    localStorage.setItem('id_token', token);\n    localStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\n  }\n  logout() {\n    localStorage.removeItem(\"id_token\");\n    localStorage.removeItem(\"expires_at\");\n  }\n  isLoggedIn() {\n    return moment().isBefore(this.getExpiration());\n  }\n  getExpiration() {\n    const expiration = localStorage.getItem(\"expires_at\");\n    if (expiration) return moment(JSON.parse(expiration));else return 0;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAmBC,WAAW,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAKhF,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAEjCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IAC1C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAc,IAAI,CAACC,UAAU,GAAG,YAAY,EAAE;MAAEH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAE,CAAC,CAACG,IAAI,CAACV,GAAG,CAACW,GAAG,IAAI,IAAI,CAACC,UAAU,CAACD,GAAG,CAACE,YAAY,CAAC,CAAC,EAAEd,WAAW,EAAE,EAAED,UAAU,CAAEgB,GAAG,IAAI;MAC7L,OAAOb,UAAU,CAAC,MAAMa,GAAG,CAAC;IAC9B,CAAC,CAAC,CAAC;EACL;EAEOC,QAAQ,CAACT,KAAa,EAAEU,SAAiB;IAC9C,OAAO,IAAI,CAACZ,IAAI,CAACI,IAAI,CAAM,IAAI,CAACC,UAAU,GAAG,eAAe,EAAE;MAAEH,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAES;IAAS,CAAE,CAAC;EACtG;EACQJ,UAAU,CAACK,KAAa;IAE9B,MAAMC,SAAS,GAAGC,MAAM,EAAE,CAACC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;IAChDC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEL,KAAK,CAAC;IACvCI,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAACN,SAAS,CAACO,OAAO,EAAE,CAAC,CAAC;EACzE;EAEOC,MAAM;IACXL,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;IACnCN,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;EACvC;EACOC,UAAU;IACf,OAAOT,MAAM,EAAE,CAACU,QAAQ,CAAC,IAAI,CAACC,aAAa,EAAE,CAAC;EAChD;EACQA,aAAa;IACnB,MAAMC,UAAU,GAAGV,YAAY,CAACW,OAAO,CAAC,YAAY,CAAC;IACrD,IAAID,UAAU,EACZ,OAAOZ,MAAM,CAACI,IAAI,CAACU,KAAK,CAACF,UAAU,CAAC,CAAC,CAAC,KACnC,OAAO,CAAC;EACf;;AAhCW7B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgC,SAAXhC,WAAW;EAAAiC,YAFV;AAAM","names":["catchError","shareReplay","tap","throwError","AuthService","constructor","http","login","email","password","post","SERVER_URL","pipe","res","setSession","access_token","err","register","passsword","token","expiresAt","moment","add","localStorage","setItem","JSON","stringify","valueOf","logout","removeItem","isLoggedIn","isBefore","getExpiration","expiration","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["/home/alaeddine/Desktop/big-data-project/movie-recommendation-app-ui/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, map, Observable, shareReplay, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private http: HttpClient) { }\n\n  public login(email: string, password: string): Observable<LoginResult> {\n    return this.http.post<LoginResult>(this.SERVER_URL + 'auth/login', { email: email, password: password }).pipe(tap(res => this.setSession(res.access_token)), shareReplay(), catchError((err) => {\n      return throwError(() => err)\n    }))\n  }\n\n  public register(email: string, passsword: string): Observable<User> {\n    return this.http.post<any>(this.SERVER_URL + 'auth/register', { email: email, password: passsword })\n  }\n  private setSession(token: string) {\n\n    const expiresAt = moment().add(360000, 'second');\n    localStorage.setItem('id_token', token)\n    localStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()))\n  }\n\n  public logout() {\n    localStorage.removeItem(\"id_token\");\n    localStorage.removeItem(\"expires_at\");\n  }\n  public isLoggedIn() {\n    return moment().isBefore(this.getExpiration());\n  }\n  private getExpiration() {\n    const expiration = localStorage.getItem(\"expires_at\");\n    if (expiration)\n      return moment(JSON.parse(expiration));\n    else return 0\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}